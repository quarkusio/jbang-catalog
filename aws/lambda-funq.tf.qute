{#if tf-providers}
terraform {
  required_version = ">= 0.14.0"
  required_providers {
    aws        = {
      source  = "hashicorp/aws"
      version = "{aws.version ?: '3.71.0'}"
    }
    archive    = {
      source  = "hashicorp/archive"
      version = "{archive.version ?: '2.2.0'}"
    }
    null = {
      source = "hashicorp/null"
      version = "{null.version ?: '3.1.0'}"
    }
  }
}
provider "aws" {
  region  = "{aws.region ?: 'eu-central-1'}"
}
{/if}


resource "aws_iam_role" "iam_for_lambda_{baseName}" {
  name = "iam_for_lambda_{baseName}"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "null_resource" "jar_file_{baseName}" {

  provisioner "local-exec" {
    command = "sh generate-jar.sh {baseName}"
  }
}

resource "aws_lambda_function" "function_{baseName}" {
  filename         = "{baseName}.jar"
  source_code_hash = filebase64sha256("{baseName}.jar")
  function_name    = "{baseName}"
  role             = aws_iam_role.iam_for_lambda_{baseName}.arn
  handler          = "io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest"

  depends_on = [null_resource.jar_file_{baseName}]

  runtime = "java11"
  memory_size = 256

}

{#if native-function}

resource "null_resource" "native_image_{baseName}" {
  provisioner "local-exec" {
    command = "sh generate-native-image.sh {baseName}"
  }
}

data "archive_file" "native_function_{baseName}" {
  output_path = "{baseName}-function.zip"
  type        = "zip"
  source_file = "bootstrap"
}

resource "aws_lambda_function" "function_{baseName}_native" {
  filename         = "{baseName}-function.zip"
  source_code_hash = filebase64sha256("{baseName}-function.zip")
  function_name    = "{baseName}"
  role             = aws_iam_role.iam_for_lambda_{baseName}.arn
  handler          = "not-needed"

  depends_on = [
    null_resource.native_image_{baseName}
  ]

  runtime     = "provided"
  memory_size = 128

}
{/if}